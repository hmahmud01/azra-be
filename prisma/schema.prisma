generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  RefreshToken RefreshToken[]
  Profile      Profile[]
}

model UserBalance {
  id                 Int              @id @default(autoincrement())
  balance            Float
  previousBalance    Float
  agentTrx           AgentTransaction @relation(fields: [agentTransactionId], references: [id])
  createdAt          DateTime         @default(now())
  agentTransactionId Int
}

model AgentTransaction {
  id               Int           @id @default(autoincrement())
  transferedAmount Float
  createdAt        DateTime      @default(now())
  updateAt         DateTime      @updatedAt
  UserBalance      UserBalance[]
}

model Profile {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model RefreshToken {
  id          Int      @id @default(autoincrement())
  hashedToken String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  udpatedAt   DateTime @updatedAt
}

model LockedBalance {
  id               Int             @id @default(autoincrement())
  currentBalance   Float
  amountLocked     Float
  trx_id           ApiTransaction? @relation(fields: [apiTransactionId], references: [id])
  lockedStatus     Boolean
  createdAt        DateTime        @default(now())
  apiTransactionId Int?
}

model Nation {
  id          Int           @id @default(autoincrement())
  name        String
  short       String
  code        String
  Mobile      Mobile[]
  Transaction Transaction[]
}

model Mobile {
  id          Int           @id @default(autoincrement())
  name        String
  createAt    DateTime      @default(now())
  nation      Nation        @relation(fields: [nationId], references: [id])
  nationId    Int
  TeleService TeleService[]
  Transaction Transaction[]
}

model TeleService {
  id          Int           @id @default(autoincrement())
  name        String
  createAt    DateTime      @default(now())
  mobile      Mobile        @relation(fields: [mobileId], references: [id])
  mobileId    Int
  Transaction Transaction[]
}

model Api {
  id             Int              @id @default(autoincrement())
  name           String
  code           String
  status         Boolean
  createdAt      DateTime         @default(now())
  ApiTransaction ApiTransaction[]
}

model LockedNumber {
  id            Int         @id @default(autoincrement())
  phone         String
  status        Boolean
  createdAt     DateTime    @default(now())
  trx           Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
}

model Transaction {
  id             Int              @id @default(autoincrement())
  phone          String
  amount         Float
  agent          String
  rechargeStatus Boolean
  country        Nation?          @relation(fields: [nationId], references: [id])
  mobile         Mobile?          @relation(fields: [mobileId], references: [id])
  service        TeleService?     @relation(fields: [teleServiceId], references: [id])
  createdAt      DateTime         @default(now())
  nationId       Int?
  mobileId       Int?
  teleServiceId  Int?
  ApiTransaction ApiTransaction[]
  LockedNumber   LockedNumber[]
}

model ApiTransaction {
  id                   Int                    @id @default(autoincrement())
  trx                  Transaction            @relation(fields: [transactionId], references: [id])
  createdAt            DateTime               @default(now())
  api                  Api                    @relation(fields: [apiId], references: [id])
  apiId                Int
  TransactionRecordApi TransactionRecordApi[]
  LockedBalance        LockedBalance[]
  transactionId        Int
}

// This will track the record for a transaction which api has been called and if that is success or failed
model TransactionRecordApi {
  id               Int            @id @default(autoincrement())
  transaction      ApiTransaction @relation(fields: [apiTransactionId], references: [id])
  apiTransactionId Int
  status           Boolean
  statement        String
  createdAt        DateTime       @default(now())
}

enum Role {
  BASIC
  ADMIN
}
