generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id   Int    @id @default(autoincrement())
  name String
}

model LockedBalance {
  id               Int             @id @default(autoincrement())
  currentBalance   Float
  amountLocked     Float
  trx_id           ApiTransaction? @relation(fields: [apiTransactionId], references: [id])
  lockedStatus     Boolean
  createdAt        DateTime        @default(now())
  apiTransactionId Int?
}

model Country {
  id        Int      @id @default(autoincrement())
  name      String
  short     String
  code      String
  createdAt DateTime @default(now())
  Network   Network? @relation(fields: [networkId], references: [id])
  networkId Int?     @unique
}

model Network {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  country   Country?
  service   Service? @relation(fields: [serviceId], references: [id])
  serviceId Int?     @unique
}

model Service {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  Network   Network?
}

model Nation {
  id     Int      @id @default(autoincrement())
  name   String
  short  String
  code   String
  Mobile Mobile[]
}

model Mobile {
  id          Int           @id @default(autoincrement())
  name        String
  createAt    DateTime      @default(now())
  nation      Nation        @relation(fields: [nationId], references: [id])
  nationId    Int
  TeleService TeleService[]
}

model TeleService {
  id       Int      @id @default(autoincrement())
  name     String
  createAt DateTime @default(now())
  mobile   Mobile   @relation(fields: [mobileId], references: [id])
  mobileId Int
}

model Api {
  id             Int              @id @default(autoincrement())
  name           String
  code           String
  status         Boolean
  createdAt      DateTime         @default(now())
  ApiTransaction ApiTransaction[]
}

model ApiTransaction {
  id                   Int                    @id @default(autoincrement())
  phone                String
  amount               Int
  agent                String
  createdAt            DateTime               @default(now())
  api                  Api                    @relation(fields: [apiId], references: [id])
  apiId                Int
  TransactionRecordApi TransactionRecordApi[]
  LockedBalance        LockedBalance[]
}

// This will track the record for a transaction which api has been called and if that is success or failed
model TransactionRecordApi {
  id               Int            @id @default(autoincrement())
  transaction      ApiTransaction @relation(fields: [apiTransactionId], references: [id])
  apiTransactionId Int
  status           Boolean
  statement        String
  createdAt        DateTime       @default(now())
}

enum Role {
  BASIC
  ADMIN
}
